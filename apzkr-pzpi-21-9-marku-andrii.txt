\фМіністерство освіти і науки України
Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії

КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Управління освітньою установою

	Студент гр. ПЗПІ-21-9                       Марку А.С.
                                                                           (підпис)
	Керівник роботи                          ст.викл. Сокорчук І.П.
                                                                            (підпис)
						      Роботу захищено «30» червня 2024р. 
						        з оцінкою     __________________

	Комісія:









Харків 2024 р. 
Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук Кафедра програмної інженерії
 Спеціальність 121 – Інженерія програмного забезпечення
Курс	3	Семестр	6	.
Навчальна дисципліна Архітектура програмного забезпечення


ЗАВДАННЯ
НА ЛАБОРАТОРНІ РОБОТИ СТУДЕНТОВІ


1.	Тема проекту: Управління освітньою установою
2.	Термін узгодження завдання з лабораторних робіт «_30_»_березня 2024р.
3.	Термін здачі завдання з лабораторних робіт «19» червня 2024р..
4.	Вихідні дані до проекту: методичні вказівки до виконання лабораторних робіт, вимоги до системи, аркуш завдання до лабораторних робіт, рекомендації що до розробки.
5.	Зміст звітів з лабораторних робіт (перелік питань, що належить розробити): Vision and Scope document, опис візуальної frontend частини, мобільна версія, опис частини кодування (backend) яка буде реалізовувати основну логіку програми та взаємодію з базою даних, модульні частини IoT.
 
КАЛЕНДАРНИЙ ПЛАН





№	Основні етапи виконання проєкту в рамках лабораторних робіт	Термін виконання
етапів	Примітка
1	Функціональна специфікація 
програмного проєкту	12 квітня 
2024 року	
2	Проєктування програмного 
проєкту	30 квітня
2024 року	
3	Кодування програмного проєкту	19 травня 
2024 року	
4	Оформлення пояснювальної 
записки	30 травня 
2024 року	
5	Захист курсової роботи	6 червня 
2024 року	


Дата видачі теми проекту у «30» березня 2024 р


Викладач лабораторних робіт	           ст.викл. Сокорчук І.П.         
(підпис)


Завдання прийняв до виконання
ст.гр. ПЗПІ-21-9	                      Марку А.С.
        (підпис)
РЕФЕРАТ


Пояснювальна записка з курсової роботи: 30 сторінок, 3 рисунки, 12 джерел.
АВТОМАТИЗАЦІЯ, АДМІНІСТРАЦІЯ, АУДИТОРІЇ, ВЕБ-САЙТ, ВИКЛАДАЧІ, ВИКОРИСТАННЯ РЕСУРСІВ, ВПРОВАДЖЕННЯ, ДОСТУП ДО ІНФОРМАЦІЇ, ЕФЕКТИВНІСТЬ, ЗАБЕЗПЕЧЕННЯ ЯКОСТІ ОСВІТИ, ЗРУЧНІСТЬ В КОРИСТУВАННІ, ІННОВАЦІЇ, ІНТЕРНЕТ РЕЧЕЙ (IOT), МОНІТОРИНГ, ОПТИМІЗАЦІЯ, ОСВІТНЯ УСТАНОВА, РОЗВИТОК, РЕСУРСИ, СИСТЕМА УПРАВЛІННЯ, СТУДЕНТИ, УПРАВЛІННЯ, ФУНКЦІОНАЛЬНІСТЬ.
Цей реферат присвячений розробці та впровадженню сучасних інформаційних систем для управління освітньою установою. Основними цілями було розроблення системи IoT для моніторингу використання аудиторій та створення функціонального веб-сайту, що забезпечить зручний доступ до необхідної інформації всім учасникам освітнього процесу.
Перша частина роботи фокусувалась на створенні IoT-системи для університетських аудиторій. Система автоматично відображає наявність курсів у конкретних аудиторіях, що сприяє оптимізації використання університетських приміщень.
Друга частина дослідження охоплює розробку сучасного веб-сайту для управління освітньою установою. Цей сайт створений з метою покращення взаємодії між адміністрацією, викладачами, студентами та їхніми батьками. Він надає зручний інтерфейс із підтримкою необхідних функціональних можливостей, що дозволяють ефективно організовувати освітній процес та забезпечувати необхідну інформаційну доступність.
 
ЗМІСТ


ВСТУП	6
1 АНАЛІЗ ПРЕДМЕТНОЇ ГАЛУЗІ	8
2 ПОСТАНОВКА ЗАДАЧІ	10
2.1 Основний функціонал системи	10
2.2 Допущення та залежності	11
2.3 Релізи	12
2.4 Користувацькі обмеження	15
3.1 Back-end частина системи	18
3.2 Frontend-частина системи	21
3.3 IoT частина системи	22
4 СТРУКТУРА БАЗИ ДАНИХ	24
4.1 ER-моделювання	24
4.2 Реалізація БД	25
5 ОСОБЛИВОСТІ РЕАЛІЗАЦІЇ ПЗ	28
5.1 Серверна частина	28
5.2 Frontend	30
5.3 IoT	30
6 ОСОБЛИВОСТІ ЗАСТОСУВАННЯ	31
ВИСНОВКИ	32
ПЕРЕЛІК ДЖЕРЕЛ	33

 
ВСТУП


В сучасному світі освітні установи є ключовим елементом розвитку суспільства, проте їхнє ефективне управління та адаптація до швидкозмінюваних умов вимагають впровадження новітніх інформаційних технологій. Освітні процеси стають все більш комплексними, вимагаючи від управління інноваційних підходів для забезпечення якісної освіти та оптимального використання ресурсів.
Мета розробки системи управління освітньою установою полягає в реалізації цих потреб через створення інтегрованої платформи, що сприяє оптимізації адміністративних процесів, покращенню якості освіти та забезпеченню зручного доступу до необхідної інформації для всіх учасників освітнього процесу. Така система має на меті стати інструментом, що сприяє підвищенню ефективності управління навчальними закладами, забезпечуючи їм здатність оперативно реагувати на поточні виклики та покращувати умови для навчання та розвитку студентів.
Запровадження інтернету речей (IoT) у навчальні заклади є стратегічно важливим, оскільки він дозволяє автоматизувати та оптимізувати багато процесів, що раніше вимагали значних людських та матеріальних ресурсів. Наприклад, система моніторингу аудиторій за допомогою IoT не лише дозволяє уникнути конфліктів у використанні приміщень, а й підвищує ефективність їх використання шляхом автоматичного контролю за доступністю та статусом кожної аудиторії. Це сприяє ефективній організації навчального процесу та забезпечує студентам і викладачам необхідний рівень комфорту та функціональності.
Розробка сучасного веб-сайту для управління освітньою установою є ще одним важливим етапом у модернізації освітніх технологій. Забезпечення зручного та привабливого інтерфейсу, а також надання необхідних функціональних можливостей для всіх учасників навчального процесу сприяє покращенню комунікаційних та інформаційних потоків в установі. Такий веб-сайт дозволяє ефективно координувати дії між адміністрацією, педагогічним складом, студентами та батьками, спрощуючи доступ до важливої інформації та забезпечуючи оперативний обмін необхідними документами та даними.
Отже, впровадження таких інформаційних систем в освітніх установах є кроком до покращення управління та підвищення якості освіти, що відповідає вимогам сучасного освітнього середовища.

 
1 АНАЛІЗ ПРЕДМЕТНОЇ ГАЛУЗІ


Моделювання предметної області включає визначення основних об'єктів (сутностей), їх атрибутів та взаємозв'язків між ними. Мета цього етапу полягає у створенні високорівневого уявлення про систему, яке не залежить від конкретних технологій або реалізації. Для даного випадку, предметна область охоплює управління освітньою установою.
Центральний елемент - це "Користувач", який взаємодіє з шістьма різними модулями системи:
–	управління оцінками - користувач може керувати оцінками студентів;
–	управління викладачами - користувач має доступ до функцій управління інформацією про викладачів;
–	управління аудиторіями - користувач може керувати інформацією про навчальні аудиторії;
–	управління курсами - користувач може додавати, видаляти та змінювати курси;
–	управління розкладом - користувач може керувати розкладом занять;
–	управління студентами - користувач має можливість керувати інформацією про студентів.
Користувач є центральною фігурою, яка має доступ до різних модулів системи, що дозволяє ефективно керувати навчальним процесом та інформацією в навчальному закладі.
Концептуальна модель предметної області дає загальне уявлення про основні об'єкти та їх взаємозв'язки в системі управління освітньою установою. Вона допомагає зрозуміти, які дані потрібно зберігати, як ці дані взаємодіють між собою та як вони можуть бути організовані для ефективного управління процесами в освітньому закладі. Це є важливим етапом для подальшої деталізації та реалізації системи, яка буде відповідати вимогам та очікуванням користувачів.


 
2 ПОСТАНОВКА ЗАДАЧІ
2.1 Основний функціонал системи


Впровадження автоматизованої системи управління освітньою установою повинно відповідати потребам клієнтів та ринку. Основні потреби включають зручний доступ до інформації, що дозволяє студентам, викладачам та адміністративному персоналу швидко отримувати необхідні дані про курси, розклад, оцінки та інші ресурси. Покращена комунікація між студентами, викладачами та адміністрацією є ключовою для успішного освітнього процесу.
Система повинна бути адаптивною та гнучкою, що дозволяє легко адаптуватися до змін в освітньому процесі та вимогах ринку, забезпечуючи можливість швидкої реакції на нові потреби. Підтримка дистанційного навчання є важливою, особливо у випадках, коли фізичний доступ до навчального закладу обмежений. Забезпечення надійного захисту особистих даних студентів та викладачів від несанкціонованого доступу та витоків є обов’язковим елементом системи.
Ефективне управління ресурсами допомагає оптимізувати використання аудиторій, викладацьких ресурсів та часу студентів для підвищення ефективності освітнього процесу. Перехід на електронні документи та записи дозволяє зменшити обсяги паперової роботи та спростити процеси зберігання та обробки інформації. Забезпечення доступу до актуальної інформації та навчальних матеріалів сприяє підвищенню рівня знань та навичок студентів, що, у свою чергу, підвищує якість освіти. Врахування цих потреб дозволить створити систему, яка буде максимально відповідати вимогам сучасних освітніх установ та забезпечувати високий рівень задоволення клієнтів.

2.2 Допущення та залежності


Для успішного впровадження автоматизованої системи управління освітньою установою необхідно враховувати низку припущень і залежностей, які можуть впливати на реалізацію та функціонування системи.
Припущення:
	усі користувачі системи (студенти, викладачі, адміністративний персонал) мають доступ до Інтернету та базові навички роботи з комп'ютером і програмним забезпеченням;
	освітня установа має необхідні технічні ресурси для впровадження та підтримки системи, включаючи серверне обладнання та програмне забезпечення;
	користувачі пройдуть належне навчання для роботи з новою системою, що забезпечить їхню швидку адаптацію та ефективне використання;
	усі дані, необхідні для заповнення бази даних (інформація про курси, студентів, викладачів, розклад, оцінки та кімнати), будуть надані вчасно та в повному обсязі;
	система буде інтегрована з існуючими інструментами та програмами, які вже використовуються в освітній установі, зокрема з системами управління навчальним процесом та іншими базами даних.
Залежності:
	залежність від постачальника програмного забезпечення. Успіх проекту залежить від якості та стабільності програмного забезпечення, яке надає постачальник, а також від надійності технічної підтримки;
	залежність від інфраструктури освітньої установи. Впровадження системи залежить від наявності необхідної інфраструктури, включаючи обладнання, мережеві ресурси та технічний персонал;
	залежність від керівництва освітньої установи. Успішне впровадження проекту залежить від підтримки та активної участі керівництва, яке має забезпечити необхідні ресурси та сприяти впровадженню змін;
	залежність від користувачів. Ефективність системи залежить від активного використання її функцій користувачами та їхньої готовності до змін у процесах управління та навчання;
	залежність від зовнішніх факторів, таких як законодавчі вимоги та нормативні акти, які можуть впливати на вимоги до захисту даних, конфіденційність та інші аспекти функціонування системи;
Врахування цих припущень і залежностей дозволить краще підготуватися до впровадження системи, знизити ризики та забезпечити її успішну реалізацію і стабільне функціонування в освітній установі.


2.3 Релізи


У початковому випуску автоматизованої системи управління освітньою установою будуть реалізовані основні функціональні вимоги, що забезпечують базові потреби користувачів та дозволяють ефективно керувати освітнім процесом.
Перш за все, буде реалізовано можливість додавання нових курсів. Користувачі зможуть вводити інформацію про назву курсу, його опис, кількість кредитів та призначати відповідного викладача.
Також система дозволить редагувати інформацію про існуючі курси. Інтерфейс надасть можливість змінювати опис, кількість кредитів та призначених викладачів для кожного курсу.
Видалення курсів з бази даних також стане доступним у початковому випуску, з можливістю архівування інформації для збереження історії.
Перегляд інформації про всі курси буде зручним і доступним завдяки інтерфейсу з можливістю фільтрації та пошуку.
Додатково, система підтримуватиме додавання нових студентів з усіма необхідними даними, включаючи ім'я, прізвище, дату народження, електронну пошту, телефон та дату зарахування.
Оновлення інформації про студентів буде можливим через інтерфейс, який дозволить редагувати особисті дані, контактну інформацію та інші деталі.
Видалення студентів з бази даних буде реалізовано з можливістю архівування інформації для збереження історії.
Перегляд інформації про всіх студентів буде зручним завдяки можливості фільтрації та пошуку.
Управління розкладом включатиме можливість створення, редагування та видалення розкладу занять, з урахуванням наявності аудиторій та викладачів.
Функція управління оцінками дозволить викладачам вводити та редагувати оцінки студентів, а також переглядати історію оцінок.
Управління кімнатами включатиме можливість додавання, редагування та видалення інформації про аудиторії, з зазначенням їхнього типу, місткості та інших параметрів.
Останнім компонентом початкового випуску буде управління викладачами. Система дозволить додавати нових викладачів з усіма необхідними даними, редагувати їхні особисті дані та призначати на курси.
Ці функціональні вимоги забезпечать базову функціональність системи в початковому випуску, дозволяючи ефективно керувати основними аспектами освітнього процесу та задовольняти потреби користувачів.
Наступні випуски автоматизованої системи управління освітньою установою розширять функціональність і забезпечать більш глибоку інтеграцію та вдосконалення освітнього процесу.
Один з напрямків розвитку - інтеграція з системами дистанційного навчання. Це дозволить забезпечити безперервність освітнього процесу в умовах обмеженого доступу до фізичних навчальних закладів. Студенти зможуть отримувати доступ до навчальних матеріалів, завдань та оцінок у режимі онлайн.
Також буде розширено модуль аналітики та звітності. Це включатиме вдосконалені інструменти для аналізу успішності студентів, моніторингу викладацької діяльності та оцінки ефективності навчальних програм. Звіти будуть генеруватися автоматично, що дозволить швидше приймати обґрунтовані рішення.
Покращення функціональності управління розкладом буде включати автоматичне оптимізування розкладу занять з урахуванням наявності ресурсів, побажань студентів та викладачів. Це допоможе уникнути конфліктів у розкладі та забезпечить більш ефективне використання аудиторій.
Розширення функцій управління кімнатами передбачає додавання можливості резервування аудиторій для проведення додаткових заходів, таких як семінари, конференції та позакласні заняття. Це дозволить більш ефективно використовувати наявні приміщення.
Модуль управління студентами буде вдосконалений, щоб включати підтримку індивідуальних навчальних планів та моніторинг прогресу кожного студента. Це забезпечить більш персоналізований підхід до навчання та допоможе студентам краще планувати свій навчальний процес.
Наступні випуски також передбачають впровадження функцій для покращення комунікації між студентами, викладачами та адміністрацією. Це включатиме внутрішню систему повідомлень, форуми для обговорень та можливість організації відеоконференцій.
Вдосконалення інтерфейсу користувача, зробить систему більш зручною та інтуїтивно зрозумілою для всіх категорій користувачів. Це включатиме адаптивний дизайн для мобільних пристроїв, налаштування зовнішнього вигляду та персоналізацію інтерфейсу.
Ці вдосконалення дозволять зробити систему ще більш потужною та гнучкою, відповідаючи на потреби сучасних освітніх установ та забезпечуючи високий рівень задоволення користувачів.


2.4 Користувацькі обмеження


В процесі розробки та впровадження автоматизованої системи управління освітньою установою необхідно враховувати певні обмеження та виключення, які можуть впливати на її функціональність та використання.
Одне з головних обмежень - це бюджетні та ресурсні обмеження. Впровадження та підтримка системи потребують значних фінансових та людських ресурсів. Обмежений бюджет може призвести до затримок у реалізації проекту або обмеження функціональності початкових випусків.
Інше обмеження - технічна інфраструктура освітньої установи. Система потребує стабільного доступу до Інтернету, надійних серверів та сучасного комп'ютерного обладнання. Наявність застарілої техніки або проблеми з Інтернет-з'єднанням можуть негативно вплинути на продуктивність та доступність системи.
Система також обмежена законодавчими вимогами щодо захисту даних та конфіденційності. Необхідно забезпечити відповідність системи усім нормативним актам та стандартам безпеки, що може вимагати додаткових ресурсів та часу на впровадження відповідних заходів.
Виключеннями з функціональності системи на початковому етапі можуть бути певні спеціалізовані функції, які не є критичними для базової роботи системи. Наприклад, підтримка інтеграції з зовнішніми системами або специфічні модулі для управління певними аспектами освітнього процесу можуть бути впроваджені на більш пізніх етапах розвитку системи.
Обмеження також можуть включати можливості персоналізації інтерфейсу користувача. На початкових етапах система може мати стандартний інтерфейс без можливості значних змін та налаштувань, що може бути вдосконалено в наступних випусках.
Ще одне виключення - підтримка різних мовних інтерфейсів. На початковому етапі система може підтримувати лише одну мову, наприклад, українську, з можливістю додавання інших мов у майбутніх версіях.
Обмеження пов'язані з обсягом даних, які система може обробляти та зберігати. Для великих освітніх установ з великою кількістю студентів, курсів та інших даних можуть знадобитися додаткові ресурси для забезпечення ефективної роботи системи.

Врахування цих обмежень та виключень дозволить краще планувати впровадження системи, уникати непередбачених проблем та забезпечити поступове розширення функціональності відповідно до можливостей та потреб освітньої установи.
 
3 ФОРМУВАННЯ ВИМОГ ДО ПРОГРАМНОЇ СИСТЕМИ
3.1 Back-end частина системи


Серверна частина проекту реалізована на основі ASP.NET Core, що є потужним фреймворком для побудови веб-додатків та API. У цьому розділі розглянемо основні компоненти серверної частини, їх роль та функціональність.
Тепер опишемо основні компоненти серверної частини.
Program.cs – є стартовим файлом, який налаштовує та запускає веб-додаток. Він містить метод Main, де створюється і конфігурується хост, який слухає HTTP-запити.
Startup.cs - відповідає за налаштування додатку. Він містить методи ConfigureServices та Configure, де реєструються сервіси додатку (наприклад, контекст бази даних) та конфігуруються HTTP-конвеєри для обробки запитів.
appsettings.json - містить конфігураційні налаштування додатку, такі як рядки підключення до бази даних, налаштування логування та інші параметри конфігурації.
Контролери відповідають за обробку HTTP-запитів та повернення відповідей клієнту. Вони містять методи дій, які відповідають на різні маршрути:
–	CoursesController.cs: Обробляє запити, пов'язані з курсами;
–	GradesController.cs: Обробляє запити, пов'язані з оцінками;
–	RoomsController.cs: Обробляє запити, пов'язані з аудиторіями;
–	SchedulesController.cs: Обробляє запити, пов'язані з розкладом;
–	StudentsController.cs: Обробляє запити, пов'язані зі студентами;
–	TeachersController.cs: Обробляє запити, пов'язані з викладачами.
Моделі представляють дані додатку та використовуються для обміну даними між контролерами та базою даних:
–	Course.cs: Модель для курсів;
–	Grade.cs: Модель для оцінок;
–	Room.cs: Модель для аудиторій;
–	Schedule.cs: Модель для розкладу;
–	Student.cs: Модель для студентів;
–	Teacher.cs: Модель для викладачів.
DataBaseContext.cs - є контекстом бази даних, який відповідає за взаємодію з базою даних через Entity Framework Core. Він визначає набори даних (DbSet) для кожної з моделей.
Тепер опишемо функціональність серверної частини:
–	підключення до бази даних - використовуючи Entity Framework Core, серверна частина з'єднується з базою даних, що дозволяє виконувати CRUD операції (створення, читання, оновлення, видалення) над даними;
–	обробка HTTP-запитів - контролери отримують запити від клієнтів, обробляють їх (наприклад, отримують дані з бази, виконують обчислення або змінюють дані), та повертають відповіді у вигляді JSON або інших форматів;
–	налаштування маршрутизації - в Startup.cs конфігурується маршрутизація, яка визначає, які контролери і методи обробляють певні маршрути;
–	валідація та обробка помилок - серверна частина забезпечує валідацію вхідних даних та обробку помилок, щоб забезпечити надійність та безпеку додатку;
–	налаштування середовищ - використовуючи конфігураційні файли (appsettings.json та appsettings.Development.json), можна налаштувати різні середовища (наприклад, розробка, тестування, продакшн) для додатку.
Серверна частина побудована таким чином, щоб забезпечити надійну та масштабовану платформу для управління освітнім процесом, забезпечуючи зручний інтерфейс для взаємодії з даними через веб-інтерфейс або API.
 
3.2 Frontend-частина системи


Інтерфейс системи управління освітньою установою розроблений таким чином, щоб забезпечити зручність та ефективність користувачів у виконанні основних завдань. Він включає кілька основних сторінок: Курси, Викладачі, Студенти, Оцінки, Аудиторії, Розклади. Кожна сторінка надає можливість створювати, редагувати та видаляти відповідні записи. Для створення та редагування записів використовується модальне вікно. Детальний опис кожної сторінки наведено нижче.
Сторінка курсів відображає список всіх курсів, що викладаються в освітній установі. Основні функції сторінки включають: перегляд, створення, редагування та видалення курсів.
Сторінка викладачей призначена для управління інформацією про викладачів. Основні функції сторінки включають: перегляд, створення, редагування та видалення.
Сторінка студентів дозволяє керувати інформацією про студентів.
Сторінка оцінок надає можливість переглядати та керувати оцінками студентів.
Сторінка аудиторій дозволяє управляти інформацією про аудиторії.
Сторінка розкладів дозволяє керувати розкладом занять. Основні функції сторінки включають: перегляд, створення, редагування та видалення розкладів.
Кожна з цих сторінок має інтуїтивно зрозумілий інтерфейс, який забезпечує легкий доступ до основних функцій системи. Використання модальних вікон для створення та редагування записів дозволяє користувачам ефективно виконувати свої завдання, не залишаючи основної сторінки.
3.3 IoT частина системи


Реалізація системи Інтернету речей (IoT) для відображення статусу аудиторій університету базувалася на використанні платформи .NET WinForms. Основними особливостями реалізації стали наступні аспекти.
Інтерфейс користувача:
–	головна форма додатку містить елементи управління для взаємодії з користувачем, включаючи: кнопку для перевірки статусу аудиторії (button1), numericUpDown для введення номера аудиторії (numericUpDown1), мітку для відображення статусу аудиторії (label2);
–	динамічна зміна кольору мітки вказує на зайнятість аудиторії (зелений - вільна, червоний - зайнята).
Для забезпечення повноти та узгодженості даних були використані наступні моделі:
–	room: містить інформацію про аудиторію, включаючи ідентифікатор, номер, будівлю, місткість, тип та розклад занять;
–	schedule: містить інформацію про розклад занять, включаючи ідентифікатор, курс, аудиторію, час початку та кінця занять;
–	course: містить інформацію про курс, включаючи ідентифікатор, назву, опис, кількість кредитів та викладача.
Інтеграція з API:
–	запити до API виконуються з використанням класу HttpClient;
–	обробка відповідей включає перевірку статусу успішності відповіді та десеріалізацію JSON-даних у відповідні моделі.
Тепер щодо логіки перевірки статусу аудиторії.
Відправка запиту до API:
–	користувач обирає номер аудиторії, і при натисканні кнопки відправляється HTTP-запит на отримання інформації про цю аудиторію;
–	у разі успішної відповіді, дані десеріалізуються в об’єкт моделі Room.
Аналіз розкладу занять:
–	поточний час порівнюється з інтервалами часу у розкладі занять для визначення, чи зайнята аудиторія у даний момент;
–	використовується метод LINQ FirstOrDefault для пошуку заняття, яке відбувається в даний момент.
Відображення статусу:
–	якщо в аудиторії зараз відбувається заняття, викликається метод ChangeLabelStatus з параметрами false і назвою курсу;
–	якщо аудиторія вільна, викликається метод ChangeLabelStatus з параметром true та null для назви курсу;
–	метод ChangeLabelStatus змінює колір фону мітки і текст залежно від статусу аудиторії.
Ця реалізація демонструє ефективний підхід до моніторингу та управління ресурсами університету, використовуючи сучасні технології та підходи до розробки програмного забезпечення.

 
4 СТРУКТУРА БАЗИ ДАНИХ
4.1 ER-моделювання


Побудова бази даних для управління освітньою установою передбачає створення ER-діаграми, яка відображає зв'язки між основними сутностями та їх атрибутами. Дана ER-діаграма (див. рис. 2.2) включає такі сутності: Курси, Розклад, Аудиторії, Викладачі, Студенти, та Оцінки. Кожна сутність має свої атрибути, які визначають її властивості. Нижче описані всі сутності, їх атрибути та зв'язки між ними.

 
Рисунок 2.2 – ER-діаграма

Таким чином, ER-діаграма відображає основні сутності освітньої установи та їх зв'язки, що дозволяє ефективно управляти навчальним процесом, враховуючи всі необхідні атрибути та взаємодії.


4.2 Реалізація БД


Курс
–	id - унікальний ідентифікатор курсу;
–	назва - назва курсу, яка визначає його зміст;
–	опис - короткий опис курсу;
–	кредити - кількість кредитів, які студент отримує за проходження курсу.
Розклад
–	id - унікальний ідентифікатор розкладу;
–	дата початку - дата початку курсу;
–	дата закінчення - дата закінчення курсу.
Аудиторія
–	id - унікальний ідентифікатор аудиторії;
–	номер - номер аудиторії;
–	будівля - будівля, в якій знаходиться аудиторія;
–	ємкість - максимальна кількість студентів, яку може вмістити аудиторія;
–	тип - тип аудиторії (наприклад, лекційна, лабораторна).
Викладач
–	id - унікальний ідентифікатор викладача;
–	ім'я - ім'я викладача;
–	прізвище - прізвище викладача;
–	дата народження - дата народження викладача;
–	пошта - електронна адреса викладача;
–	телефон - номер телефону викладача;
–	дата прийняття на роботу - дата, коли викладач був прийнятий на роботу;
–	відділ - відділ або кафедра, до якої належить викладач.
Студент
–	id - унікальний ідентифікатор студента;
–	ім'я - ім'я студента;
–	прізвище - прізвище студента;
–	дата народження - дата народження студента;
–	пошта - електронна адреса студента;
–	телефон - номер телефону студента;
–	дата прийняття до закладу - дата, коли студент був прийнятий до навчального закладу.
Оцінка
–	id - унікальний ідентифікатор оцінки;
–	оцінка - оцінка, яку отримав студент;
–	дата - дата виставлення оцінки.
Зв'язки між сутностями:
–	курс - викладач: зв'язок один до багатьох, оскільки один викладач може викладати кілька курсів, але кожен курс має одного викладача;
–	курс - розклад: зв'язок один до одного, оскільки кожен курс має свій унікальний розклад;
–	розклад - аудиторія: зв'язок один до багатьох, оскільки одна аудиторія може бути використана для різних курсів, але кожен розклад має одну аудиторію;
–	курс - оцінка: зв'язок один до багатьох, оскільки один курс може мати багато оцінок (для різних студентів), але кожна оцінка відноситься до одного курсу;
–	оцінка - студент: зв'язок багато до одного, оскільки один студент може отримати багато оцінок за різні курси, але кожна оцінка належить до одного студента.
 
5 ОСОБЛИВОСТІ РЕАЛІЗАЦІЇ ПЗ
5.1 Серверна частина


Діаграма пакетів надає огляд структурної організації системи, відображаючи взаємозв'язки між різними пакетами та модулями. У даній діаграмі (див. рис. 5.1) ми бачимо чотири основні пакети: Frontend Package, Backend Package, IoT Package та Mobile Package. Кожен з цих пакетів містить різні модулі, які виконують специфічні функції.

 
Рисунок 5.1 – Діаграма пакетів

Діаграма розгортання відображає фізичне розташування компонентів системи, включаючи сервери, бази даних, клієнтські пристрої та інші елементи інфраструктури. Вона демонструє, як програмні компоненти та модулі розгортаються на апаратних вузлах. Діаграма розгортання (див. рис. 5.2) включає наступні вузли: веб-сервер, сервер бази даних, клієнтські пристрої та IoT-пристрої.

 
Рисунок 5.2 – Діаграма розгортання

Загальна архітектура системи включає взаємодію між клієнтськими пристроями, веб-сервером, сервером бази даних та IoT-пристроями. Така архітектура забезпечує масштабованість, надійність та гнучкість системи, дозволяючи ефективно управляти освітньою установою.
Ця діаграма розгортання показує фізичне розташування різних компонентів та їх взаємозв'язки, що є важливим аспектом для розуміння того, як система працює в реальному середовищі.


5.2 Frontend


При розробці клієнтської частини освітньої установи були використані сучасні технології та інструменти, які забезпечили високу продуктивність, масштабованість та зручність у використанні. Основні технології, що застосовувалися під час розробки, включають:
–	React.js;
–	JavaScript;
–	TypeScript;
–	ReactRouter;
–	Axios;
–	CSS;
–	HTML.
Використання цих технологій дозволило створити сучасний, ефективний та зручний для користувачів інтерфейс, який відповідає всім вимогам сучасних веб-застосунків.


5.3 IoT 


Система IoT дозволяє автоматизувати моніторинг використання аудиторій. Це включає в себе збір і передачу даних про статус аудиторій (вільна/зайнята), що дає змогу ефективно керувати доступом до приміщень та використовувати їх відповідно до потреб. 
6 ОСОБЛИВОСТІ ЗАСТОСУВАННЯ
6.1 IoT система


Система включає в себе різноманітні компоненти, такі як backend, frontend та IoT-платформа. Backend відповідає за обробку даних, управління базою даних та бізнес-логікою системи. Frontend забезпечує інтерфейс користувача, що зручно взаємодіє з користувачем, надаючи доступ до функціональності системи через веб-інтерфейс. IoT-платформа відповідає за збір та передачу даних з датчиків, розташованих в аудиторіях, що надає реальний час інформації про стан приміщень.
Система IoT інтегрується з існуючими інформаційними системами університету, такими як система управління розкладом занять, системи безпеки та контролю доступу. Це забезпечує єдиний інформаційний простір для управління аудиторіями, що підвищує ефективність управління ресурсами і спрощує взаємодію між різними департаментами університету.
Благодаря системі IoT, адміністрація університету має можливість отримувати інформацію про стан аудиторій в реальному часі. Це дозволяє оперативно реагувати на зміни в розкладі занять, несподівані події або потреби в зміні використання приміщень.
Система забезпечує високий рівень безпеки та конфіденційності, управляючи доступом до даних та забезпечуючи захист від несанкціонованого доступу до інформації про використання аудиторій.
Ці особливості демонструють, як система IoT може змінити підхід до управління університетськими аудиторіями, забезпечуючи покращення ефективності, комфорту та безпеки учасників навчального процесу.
 
ВИСНОВКИ


В ході даної курсової роботи було проаналізовано та досліджено різні аспекти впровадження сучасних інформаційних технологій для оптимізації управління освітньою установою. Основними напрямками дослідження стали ефективність адміністративних процесів, якість освіти та забезпечення зручного доступу до інформації для всіх учасників освітнього процесу.
Ефективність управління освітньою установою: Впровадження ефективної системи управління сприяє оптимізації розкладів, покращенню контролю за успішністю студентів та ефективному використанню ресурсів, що створює сприятливе навчальне середовище.
Інноваційні рішення з використання IoT: Використання IoT для моніторингу використання аудиторій дозволяє у реальному часі відстежувати їх статус і зайнятість, що сприяє підвищенню ефективності використання університетських приміщень.
Впровадження сучасного веб-сайту для управління установою: Веб-сайт забезпечує швидкий та зручний доступ до необхідної інформації для адміністрації, викладачів, студентів та їхніх батьків, спрощуючи комунікацію і координацію в навчальному процесі.
Впровадження сучасних інформаційних технологій управління освітньою установою сприяє покращенню якості освіти, оптимізації управлінських процесів та підвищенню загальної ефективності установи. Дослідження демонструє перспективи подальшого розвитку та вдосконалення систем управління з метою задоволення сучасних вимог у сфері освіти.
 
ПЕРЕЛІК ДЖЕРЕЛ


1.	Microsoft. (2023). ASP.NET Core Documentation. URL: https://learn.microsoft.com/en-us/aspnet/core/?view=aspnetcore-6.0.
2.	Entity Framework Core Documentation. (2023). URL: https://learn.microsoft.com/en-us/ef/core/ .
3.	Microsoft Learn. (2023). Introduction to ASP.NET Core. URL: https://learn.microsoft.com/en-us/training/modules/intro-to-aspnet-core/.
4.	Документація .NET. URL: https://learn.microsoft.com/en-us/dotnet/.
5.	Розробка інтерфейсів користувача з Windows Forms. URL: https://learn.microsoft.com/en-us/dotnet/desktop/winforms/?view=netdesktop-6.0.
6.	System.Text.Json для роботи з JSON. URL: https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-6.0.
7.	Офіційні посібники та статті по IoT. URL: https://azure.microsoft.com/en-us/overview/internet-of-things/.
8.	React Documentation. URL: https://reactjs.org/docs/getting-started.html.
9.	JavaScript Documentation. URL: https://developer.mozilla.org/en-US/docs/Web/JavaScript.
10.	TypeScript Documentation. URL: https://www.typescriptlang.org/docs/ .
11.	Axios Documentation. URL: https://axios-http.com/docs/intro.
12.	React Router Documentation. URL: https://reactrouter.com/en/main.
